import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from "react/jsx-runtime";
import { useState, useEffect } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from './ui/card';
import { Button } from './ui/button';
import { Badge } from './ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from './ui/tabs';
import { Progress } from './ui/progress';
import { Alert, AlertDescription } from './ui/alert';
import { Skeleton } from './ui/skeleton';
import { useLeadApi } from '../hooks/api/useLeadApi';
import { toast } from 'sonner';
import { Users, UserCheck, UserX, Mail, Target, Activity, Clock, CheckCircle, Eye, BarChart3, MessageSquare, Star, ArrowRight, Building2 } from 'lucide-react';
export function LeadManagement({ onNavigate }) {
    const [activeTab, setActiveTab] = useState('overview');
    const { getLeadStats, getRecentActivity, getTopLeads } = useLeadApi();
    const [leadStats, setLeadStats] = useState(null);
    const [recentActivity, setRecentActivity] = useState([]);
    const [topLeads, setTopLeads] = useState([]);
    const [isLoading, setIsLoading] = useState(true);
    useEffect(() => {
        const fetchData = async () => {
            setIsLoading(true);
            try {
                // Fetch lead statistics
                const stats = await getLeadStats('all_time');
                setLeadStats(stats);
                // Fetch recent activity
                const activity = await getRecentActivity();
                setRecentActivity(activity);
                // Fetch top qualified leads
                const leads = await getTopLeads();
                setTopLeads(leads);
            }
            catch (error) {
                toast.error('Failed to fetch lead data. Please try again.');
                console.error('Error fetching lead data:', error);
            }
            finally {
                setIsLoading(false);
            }
        };
        fetchData();
    }, [getLeadStats, getRecentActivity, getTopLeads]);
    const getStatusColor = (status) => {
        switch (status) {
            case 'qualified': return 'default';
            case 'contacted': return 'secondary';
            case 'responded': return 'outline';
            case 'unqualified': return 'destructive';
            default: return 'outline';
        }
    };
    const getActivityIcon = (type) => {
        switch (type) {
            case 'qualification': return UserCheck;
            case 'email': return Mail;
            case 'response': return MessageSquare;
            case 'disqualification': return UserX;
            default: return Activity;
        }
    };
    const getEngagementColor = (engagement) => {
        switch (engagement) {
            case 'High': return 'text-green-500';
            case 'Medium': return 'text-yellow-600';
            case 'Low': return 'text-red-600';
            default: return 'text-gray-600';
        }
    };
    // Helper to render skeleton loaders
    const renderKeyMetricSkeleton = () => (_jsxs(Card, { className: "bg-white border border-gray-100 shadow-sm", children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-2", children: [_jsx(Skeleton, { className: "h-4 w-1/2" }), _jsx(Skeleton, { className: "h-4 w-4" })] }), _jsxs(CardContent, { children: [_jsx(Skeleton, { className: "h-8 w-1/3 mb-1" }), _jsx(Skeleton, { className: "h-3 w-1/2" })] })] }));
    const renderActivitySkeleton = () => (_jsxs("div", { className: "flex items-start gap-3 p-3 border border-gray-100 rounded-lg bg-white", children: [_jsx(Skeleton, { className: "w-4 h-4 rounded-full mt-0.5" }), _jsxs("div", { className: "flex-1 space-y-2", children: [_jsxs("div", { className: "flex items-start justify-between gap-2", children: [_jsxs("div", { className: "space-y-2", children: [_jsx(Skeleton, { className: "h-4 w-32" }), _jsx(Skeleton, { className: "h-3 w-48" })] }), _jsxs("div", { className: "flex flex-col items-end gap-2", children: [_jsx(Skeleton, { className: "h-5 w-20" }), _jsx(Skeleton, { className: "h-3 w-16" })] })] }), _jsx(Skeleton, { className: "h-5 w-24" })] })] }));
    const renderTopLeadSkeleton = () => (_jsxs("div", { className: "flex items-center justify-between p-4 border rounded-lg bg-white border-gray-100", children: [_jsxs("div", { className: "flex items-center gap-4", children: [_jsx(Skeleton, { className: "flex items-center justify-center w-10 h-10 rounded-lg" }), _jsxs("div", { children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx(Skeleton, { className: "h-4 w-24" }), _jsx(Skeleton, { className: "h-5 w-16" })] }), _jsx(Skeleton, { className: "h-3 w-32 mt-1" }), _jsxs("div", { className: "flex items-center gap-4 mt-1 text-xs text-muted-foreground", children: [_jsx(Skeleton, { className: "h-3 w-16" }), _jsx(Skeleton, { className: "h-3 w-24" }), _jsx(Skeleton, { className: "h-3 w-20" })] })] })] }), _jsxs("div", { className: "flex items-center gap-4", children: [_jsxs("div", { className: "text-right", children: [_jsx(Skeleton, { className: "h-4 w-20 mb-1" }), _jsx(Skeleton, { className: "h-3 w-12" })] }), _jsxs("div", { className: "text-right", children: [_jsx(Skeleton, { className: "h-3 w-24" }), _jsx(Skeleton, { className: "h-3 w-16" })] }), _jsx(Skeleton, { className: "h-8 w-8" })] })] }));
    return (_jsxs("div", { className: "min-h-screen bg-gray-50/30 p-6", children: [_jsxs("div", { className: "flex items-center justify-between mb-6", children: [_jsxs("div", { children: [_jsx("h1", { className: "text-2xl font-bold text-gray-900", children: "Lead Management" }), _jsx("p", { className: "text-gray-600 mt-1", children: "Manage qualified and unqualified leads with automated email campaigns" })] }), _jsxs("div", { className: "flex gap-3", children: [_jsxs(Button, { variant: "outline", className: "bg-white border-gray-200 hover:bg-gray-50", onClick: () => onNavigate('email-campaigns'), children: [_jsx(Mail, { className: "h-4 w-4 mr-2" }), "Email Campaigns"] }), _jsxs(Button, { className: "bg-[#FD9646] hover:bg-[#FD9646]/90 text-white", onClick: () => onNavigate('leads-list'), children: [_jsx(Users, { className: "h-4 w-4 mr-2" }), "View All Leads"] })] })] }), _jsx("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8", children: isLoading ? (_jsxs(_Fragment, { children: [renderKeyMetricSkeleton(), renderKeyMetricSkeleton(), renderKeyMetricSkeleton(), renderKeyMetricSkeleton()] })) : (_jsxs(_Fragment, { children: [_jsxs(Card, { className: "bg-white border border-gray-100 shadow-sm hover:shadow-md transition-shadow duration-300", children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-3", children: [_jsxs("div", { children: [_jsx(CardTitle, { className: "text-sm font-medium text-gray-600", children: "Total Leads" }), _jsx("div", { className: "text-3xl font-bold text-gray-900 mt-2", children: leadStats?.totalLeads?.toLocaleString() || '0' })] }), _jsx("div", { className: "h-12 w-12 bg-blue-50 rounded-lg flex items-center justify-center", children: _jsx(Users, { className: "h-6 w-6 text-blue-600" }) })] }), _jsx(CardContent, { className: "pt-0", children: _jsxs("p", { className: "text-sm text-gray-500", children: [_jsxs("span", { className: "text-green-500 font-medium", children: ["+", leadStats?.totalChange || 0, "%"] }), " from last month"] }) })] }), _jsxs(Card, { className: "bg-white border border-gray-100 shadow-sm hover:shadow-md transition-shadow duration-300", children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-3", children: [_jsxs("div", { children: [_jsx(CardTitle, { className: "text-sm font-medium text-gray-600", children: "Qualified Leads" }), _jsx("div", { className: "text-3xl font-bold text-gray-900 mt-2", children: leadStats?.qualifiedLeads || '0' })] }), _jsx("div", { className: "h-12 w-12 bg-green-50 rounded-lg flex items-center justify-center", children: _jsx(UserCheck, { className: "h-6 w-6 text-green-600" }) })] }), _jsx(CardContent, { className: "pt-0", children: _jsxs("p", { className: "text-sm text-gray-500", children: [_jsxs("span", { className: "text-green-500 font-medium", children: ["+", leadStats?.conversionRate || 0, "%"] }), " conversion rate"] }) })] }), _jsxs(Card, { className: "bg-white border border-gray-100 shadow-sm hover:shadow-md transition-shadow duration-300", children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-3", children: [_jsxs("div", { children: [_jsx(CardTitle, { className: "text-sm font-medium text-gray-600", children: "Email Open Rate" }), _jsxs("div", { className: "text-3xl font-bold text-gray-900 mt-2", children: [leadStats?.emailOpenRate || '0', "%"] })] }), _jsx("div", { className: "h-12 w-12 bg-purple-50 rounded-lg flex items-center justify-center", children: _jsx(Mail, { className: "h-6 w-6 text-purple-600" }) })] }), _jsx(CardContent, { className: "pt-0", children: _jsxs("p", { className: "text-sm text-gray-500", children: [_jsxs("span", { className: "text-green-500 font-medium", children: ["+", leadStats?.emailOpenRateChange || 0, "%"] }), " from last campaign"] }) })] }), _jsxs(Card, { className: "bg-white border border-gray-100 shadow-sm hover:shadow-md transition-shadow duration-300", children: [_jsxs(CardHeader, { className: "flex flex-row items-center justify-between space-y-0 pb-3", children: [_jsxs("div", { children: [_jsx(CardTitle, { className: "text-sm font-medium text-gray-600", children: "Avg Response Time" }), _jsx("div", { className: "text-3xl font-bold text-gray-900 mt-2", children: leadStats?.avgResponseTime || '0' })] }), _jsx("div", { className: "h-12 w-12 bg-orange-50 rounded-lg flex items-center justify-center", children: _jsx(Clock, { className: "h-6 w-6 text-orange-600" }) })] }), _jsx(CardContent, { className: "pt-0", children: _jsxs("p", { className: "text-sm text-gray-500", children: [_jsx("span", { className: "text-green-500 font-medium", children: leadStats?.avgResponseTimeChange || 'No change' }), " improvement"] }) })] })] })) }), _jsxs(Tabs, { value: activeTab, onValueChange: setActiveTab, className: "w-full", children: [_jsxs(TabsList, { className: "grid w-full grid-cols-4 mb-8 bg-white border border-gray-200 p-1 rounded-lg", children: [_jsx(TabsTrigger, { value: "overview", className: "rounded-md px-4 py-2 data-[state=active]:bg-gray-100 data-[state=active]:text-gray-900 font-medium text-gray-600 hover:text-gray-900 transition-all duration-200", children: "Overview" }), _jsx(TabsTrigger, { value: "qualified", className: "rounded-md px-4 py-2 data-[state=active]:bg-gray-100 data-[state=active]:text-gray-900 font-medium text-gray-600 hover:text-gray-900 transition-all duration-200", children: "Qualified Leads" }), _jsx(TabsTrigger, { value: "unqualified", className: "rounded-md px-4 py-2 data-[state=active]:bg-gray-100 data-[state=active]:text-gray-900 font-medium text-gray-600 hover:text-gray-900 transition-all duration-200", children: "Unqualified Leads" }), _jsx(TabsTrigger, { value: "campaigns", className: "rounded-md px-4 py-2 data-[state=active]:bg-gray-100 data-[state=active]:text-gray-900 font-medium text-gray-600 hover:text-gray-900 transition-all duration-200", children: "Email Campaigns" })] }), _jsxs(TabsContent, { value: "overview", className: "space-y-8", children: [_jsxs("div", { className: "grid grid-cols-1 lg:grid-cols-2 gap-8", children: [_jsxs(Card, { className: "bg-white border border-gray-100 shadow-sm", children: [_jsx(CardHeader, { className: "pb-4", children: _jsx("div", { className: "flex items-center justify-between", children: _jsxs("div", { children: [_jsxs(CardTitle, { className: "flex items-center gap-2 text-lg font-semibold", children: [_jsx(Target, { className: "h-5 w-5 text-gray-700" }), "Lead Pipeline"] }), _jsx(CardDescription, { className: "text-gray-500 mt-1", children: "Current lead distribution and conversion funnel" })] }) }) }), _jsx(CardContent, { className: "space-y-6", children: isLoading ? (_jsxs("div", { className: "space-y-4", children: [_jsx(Skeleton, { className: "h-4 w-full" }), _jsx(Skeleton, { className: "h-4 w-full" }), _jsx(Skeleton, { className: "h-4 w-full" }), _jsx(Skeleton, { className: "h-4 w-full" })] })) : (_jsxs(_Fragment, { children: [_jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm font-medium text-gray-700", children: "Total Leads" }), _jsx("span", { className: "font-bold text-lg text-gray-900", children: leadStats?.totalLeads?.toLocaleString() || 0 })] }), _jsx(Progress, { value: 100, className: "h-3 bg-gray-100" })] }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm font-medium text-gray-700", children: "Contacted" }), _jsx("span", { className: "font-bold text-lg text-gray-900", children: leadStats?.contacted || 0 })] }), _jsx(Progress, { value: leadStats ? (leadStats.contacted / leadStats.totalLeads) * 100 : 0, className: "h-3 bg-gray-100" })] }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm font-medium text-gray-700", children: "Qualified" }), _jsx("span", { className: "font-bold text-lg text-gray-900", children: leadStats?.qualifiedLeads || 0 })] }), _jsx(Progress, { value: leadStats ? (leadStats.qualifiedLeads / leadStats.totalLeads) * 100 : 0, className: "h-3 bg-gray-100" })] }), _jsxs("div", { className: "space-y-3", children: [_jsxs("div", { className: "flex justify-between items-center", children: [_jsx("span", { className: "text-sm font-medium text-gray-700", children: "Responded" }), _jsx("span", { className: "font-bold text-lg text-gray-900", children: leadStats?.responded || 0 })] }), _jsx(Progress, { value: leadStats ? (leadStats.responded / leadStats.totalLeads) * 100 : 0, className: "h-3 bg-gray-100" })] })] })) })] }), _jsxs(Card, { className: "bg-white border border-gray-100 shadow-sm", children: [_jsxs(CardHeader, { className: "pb-4", children: [_jsxs(CardTitle, { className: "flex items-center gap-2 text-lg font-semibold", children: [_jsx(Activity, { className: "h-5 w-5 text-gray-700" }), "Recent Activity"] }), _jsx(CardDescription, { className: "text-gray-500 mt-1", children: "Latest lead interactions and status changes" })] }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: isLoading ? (_jsx(_Fragment, { children: [...Array(4)].map((_, index) => (_jsx("div", { children: renderActivitySkeleton() }, index))) })) : recentActivity.length === 0 ? (_jsxs("div", { className: "text-center py-8 text-gray-500", children: [_jsx(Activity, { className: "h-12 w-12 mx-auto mb-4 text-gray-300" }), _jsx("p", { children: "No recent activity found" })] })) : (recentActivity.map((activity, index) => {
                                                        const getActivityIcon = (type) => {
                                                            switch (type) {
                                                                case 'qualification': return _jsx(UserCheck, { className: "h-4 w-4 text-green-500" });
                                                                case 'disqualification': return _jsx(UserX, { className: "h-4 w-4 text-red-500" });
                                                                case 'email': return _jsx(Mail, { className: "h-4 w-4 text-blue-500" });
                                                                case 'response': return _jsx(MessageSquare, { className: "h-4 w-4 text-purple-500" });
                                                                default: return _jsx(CheckCircle, { className: "h-4 w-4 text-gray-500" });
                                                            }
                                                        };
                                                        const getStatusBadge = (status) => {
                                                            switch (status) {
                                                                case 'qualified': return _jsx(Badge, { className: "bg-green-100 text-green-800 hover:bg-green-100 border-0", children: "Qualified" });
                                                                case 'unqualified': return _jsx(Badge, { variant: "destructive", className: "bg-red-100 text-red-800 hover:bg-red-100", children: "Unqualified" });
                                                                case 'contacted': return _jsx(Badge, { variant: "secondary", className: "bg-blue-100 text-blue-800 hover:bg-blue-100", children: "Contacted" });
                                                                case 'responded': return _jsx(Badge, { variant: "outline", className: "border-gray-300", children: "Responded" });
                                                                default: return _jsx(Badge, { variant: "outline", className: "border-gray-300", children: "Unknown" });
                                                            }
                                                        };
                                                        return (_jsxs("div", { className: "flex items-start gap-3 p-3 border border-gray-100 rounded-lg hover:bg-gray-50 transition-colors", children: [_jsx("div", { className: "flex-shrink-0 mt-0.5", children: getActivityIcon(activity.type) }), _jsxs("div", { className: "flex-1 min-w-0", children: [_jsxs("div", { className: "flex items-start justify-between gap-2", children: [_jsxs("div", { children: [_jsx("h4", { className: "font-medium text-gray-900", children: activity.lead }), _jsx("p", { className: "text-sm text-gray-600 mt-1", children: activity.action })] }), _jsxs("div", { className: "flex flex-col items-end gap-2", children: [getStatusBadge(activity.status), _jsx("span", { className: "text-xs text-gray-500", children: activity.time })] })] }), _jsx("div", { className: "mt-2", children: _jsx("span", { className: "text-xs font-medium text-blue-600 bg-blue-50 px-2 py-1 rounded", children: activity.value }) })] })] }, index));
                                                    })) }) })] })] }), _jsxs(Card, { className: "bg-white border border-gray-100 shadow-sm", children: [_jsx(CardHeader, { className: "pb-4", children: _jsxs("div", { className: "flex items-center justify-between", children: [_jsxs("div", { children: [_jsxs(CardTitle, { className: "flex items-center gap-2 text-lg font-semibold", children: [_jsx(Star, { className: "h-5 w-5 text-gray-700" }), "Top Qualified Leads"] }), _jsx(CardDescription, { className: "text-gray-500 mt-1", children: "High-priority leads requiring immediate attention" })] }), _jsxs(Button, { variant: "outline", className: "bg-white border-gray-200 hover:bg-gray-50", onClick: () => onNavigate('qualified-leads'), children: [_jsx(Eye, { className: "h-4 w-4 mr-2" }), "View All"] })] }) }), _jsx(CardContent, { children: _jsx("div", { className: "space-y-4", children: isLoading ? (_jsx(_Fragment, { children: [...Array(3)].map((_, index) => (_jsx("div", { children: renderTopLeadSkeleton() }, index))) })) : topLeads.length === 0 ? (_jsxs("div", { className: "text-center py-8 text-gray-500", children: [_jsx(Users, { className: "h-12 w-12 mx-auto mb-4 text-gray-300" }), _jsx("p", { children: "No qualified leads found" })] })) : (topLeads.map((lead) => (_jsxs("div", { className: "flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50 transition-colors border-gray-100", children: [_jsxs("div", { className: "flex items-center gap-4", children: [_jsx("div", { className: "flex items-center justify-center w-10 h-10 bg-blue-100 rounded-lg", children: _jsx(Building2, { className: "h-5 w-5 text-blue-600" }) }), _jsxs("div", { children: [_jsxs("div", { className: "flex items-center gap-2", children: [_jsx("h4", { className: "font-medium text-gray-900", children: lead.company }), _jsx(Badge, { variant: getStatusColor(lead.status), className: "text-xs", children: lead.status })] }), _jsxs("p", { className: "text-sm text-gray-600", children: [lead.contact, " \u2022 ", lead.title] }), _jsxs("div", { className: "flex items-center gap-4 mt-1 text-xs text-gray-500", children: [_jsx("span", { children: lead.industry }), _jsxs("span", { children: [lead.employees?.toLocaleString(), " employees"] }), _jsxs("span", { className: `font-medium ${getEngagementColor(lead.engagement)}`, children: [lead.engagement, " engagement"] })] })] })] }), _jsxs("div", { className: "flex items-center gap-4", children: [_jsxs("div", { className: "text-right", children: [_jsx("div", { className: "font-medium text-green-600", children: lead.value }), _jsxs("div", { className: "text-sm text-gray-500", children: ["Score: ", lead.score] })] }), _jsxs("div", { className: "text-right", children: [_jsx("div", { className: "text-sm font-medium text-gray-700", children: lead.nextAction }), _jsxs("div", { className: "text-xs text-gray-500", children: ["Last: ", lead.lastContact] })] }), _jsx(Button, { size: "sm", variant: "outline", className: "hover:bg-gray-50", children: _jsx(ArrowRight, { className: "h-4 w-4" }) })] })] }, lead.id)))) }) })] }), _jsxs("div", { className: "grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6", children: [_jsx(Card, { className: "cursor-pointer hover:shadow-lg transition-all duration-300 bg-green-50 border-green-200", onClick: () => onNavigate('leads-list', {
                                            search: "",
                                            status: "qualified",
                                            industry: "",
                                            score: "",
                                            engagement: ""
                                        }), children: _jsxs(CardContent, { className: "p-6 text-center", children: [_jsx(UserCheck, { className: "h-8 w-8 mx-auto mb-3 text-green-600" }), _jsx("h3", { className: "font-semibold text-gray-900", children: "Qualified Leads" }), _jsx("p", { className: "text-sm text-gray-600 mt-2", children: "Manage high-potential prospects" })] }) }), _jsx(Card, { className: "cursor-pointer hover:shadow-lg transition-all duration-300 bg-red-50 border-red-200", onClick: () => onNavigate('leads-list', {
                                            search: "",
                                            status: "unqualified",
                                            industry: "",
                                            score: "",
                                            engagement: ""
                                        }), children: _jsxs(CardContent, { className: "p-6 text-center", children: [_jsx(UserX, { className: "h-8 w-8 mx-auto mb-3 text-red-600" }), _jsx("h3", { className: "font-semibold text-gray-900", children: "Unqualified Leads" }), _jsx("p", { className: "text-sm text-gray-600 mt-2", children: "Review and nurture prospects" })] }) }), _jsx(Card, { className: "cursor-pointer hover:shadow-lg transition-all duration-300 bg-blue-50 border-blue-200", onClick: () => onNavigate('email-campaigns'), children: _jsxs(CardContent, { className: "p-6 text-center", children: [_jsx(Mail, { className: "h-8 w-8 mx-auto mb-3 text-blue-600" }), _jsx("h3", { className: "font-semibold text-gray-900", children: "Email Campaigns" }), _jsx("p", { className: "text-sm text-gray-600 mt-2", children: "Automated outreach and follow-ups" })] }) }), _jsx(Card, { className: "cursor-pointer hover:shadow-lg transition-all duration-300 bg-purple-50 border-purple-200", onClick: () => onNavigate('leads-list'), children: _jsxs(CardContent, { className: "p-6 text-center", children: [_jsx(BarChart3, { className: "h-8 w-8 mx-auto mb-3 text-purple-600" }), _jsx("h3", { className: "font-semibold text-gray-900", children: "Lead Analytics" }), _jsx("p", { className: "text-sm text-gray-600 mt-2", children: "Performance and conversion metrics" })] }) })] })] }), _jsx(TabsContent, { value: "qualified", children: _jsxs(Alert, { className: "bg-green-50 border-green-200", children: [_jsx(CheckCircle, { className: "h-4 w-4 text-green-600" }), _jsxs(AlertDescription, { className: "text-green-800", children: ["You have ", leadStats?.qualifiedLeads || 0, " qualified leads.", _jsx(Button, { variant: "link", className: "p-0 ml-1 text-green-700 hover:text-green-800", onClick: () => onNavigate('leads-list', {
                                                search: "",
                                                status: "qualified",
                                                industry: "",
                                                score: "",
                                                engagement: ""
                                            }), children: "View detailed qualified leads \u2192" })] })] }) }), _jsx(TabsContent, { value: "unqualified", children: _jsxs(Alert, { className: "bg-red-50 border-red-200", children: [_jsx(UserX, { className: "h-4 w-4 text-red-600" }), _jsxs(AlertDescription, { className: "text-red-800", children: ["You have ", leadStats?.unqualified || 0, " unqualified leads that may need attention.", _jsx(Button, { variant: "link", className: "p-0 ml-1 text-red-700 hover:text-red-800", onClick: () => onNavigate('leads-list', {
                                                search: "",
                                                status: "unqualified",
                                                industry: "",
                                                score: "",
                                                engagement: ""
                                            }), children: "Review unqualified leads \u2192" })] })] }) }), _jsx(TabsContent, { value: "campaigns", children: _jsxs(Alert, { className: "bg-blue-50 border-blue-200", children: [_jsx(Mail, { className: "h-4 w-4 text-blue-600" }), _jsxs(AlertDescription, { className: "text-blue-800", children: ["Email campaigns are running with ", leadStats?.emailOpenRate || 0, "% open rate.", _jsx(Button, { variant: "link", className: "p-0 ml-1 text-blue-700 hover:text-blue-800", onClick: () => onNavigate('email-campaigns'), children: "Manage email campaigns \u2192" })] })] }) })] })] }));
}
